/*
  –ó–∞–¥–∞—á–∞: LeetCode 2758. Next Day

  –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:
  –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã Date —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, 
  —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ date.nextDay() –Ω–∞ –ª—é–±–æ–º –æ–±—ä–µ–∫—Ç–µ Date 
  –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD" –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.

  –ü—Ä–∏–º–µ—Ä 1:
  –í—Ö–æ–¥: date = "2014-06-20"
  –í—ã—Ö–æ–¥: "2014-06-21"
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
  const date = new Date("2014-06-20");
  date.nextDay(); // "2014-06-21"

  –ü—Ä–∏–º–µ—Ä 2:
  –í—Ö–æ–¥: date = "2017-10-31"
  –í—ã—Ö–æ–¥: "2017-11-01"
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
  –¥–µ–Ω—å –ø–æ—Å–ª–µ 2017-10-31 ‚Äî —ç—Ç–æ 2017-11-01

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
  new Date(date) –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç Date
*/


Date.prototype.nextDay = function () {
  const date = new Date(this.valueOf());

  date.setDate(date.getDate() + 1);

  return date.toISOString().slice(0, 10);
};










// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/*
  –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ Date.prototype.nextDay.
  –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
*/
const tests = [
  {
    description: "–û–±—ã—á–Ω–∞—è –¥–∞—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—è—Ü–∞",
    async test() {
      const date = new Date("2025-07-07");
      const next = date.nextDay();
      const expected = "2025-07-08";

      assert(
        next === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next}`
      );

      // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç Date –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
      assert(
        date.toISOString().slice(0, 10) === "2025-07-07",
        "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π"
      );
    },
  },
  {
    description: "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É",
    async test() {
      const date = new Date("2025-01-31");
      const next = date.nextDay();
      const expected = "2025-02-01";

      assert(
        next === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next}`
      );
      assert(
        date.toISOString().slice(0, 10) === "2025-01-31",
        "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π"
      );
    },
  },
  {
    description: "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–æ–¥—É",
    async test() {
      const date = new Date("2025-12-31");
      const next = date.nextDay();
      const expected = "2026-01-01";

      assert(
        next === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next}`
      );
      assert(
        date.toISOString().slice(0, 10) === "2025-12-31",
        "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π"
      );
    },
  },
  {
    description: "–í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥: 28 —Ñ–µ–≤—Ä–∞–ª—è",
    async test() {
      const date = new Date("2020-02-28");
      const next = date.nextDay();
      const expected = "2020-02-29";

      assert(
        next === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next}`
      );
    },
  },
  {
    description: "–ù–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥: 28 —Ñ–µ–≤—Ä–∞–ª—è",
    async test() {
      const date = new Date("2019-02-28");
      const next = date.nextDay();
      const expected = "2019-03-01";

      assert(
        next === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next}`
      );
    },
  },
  {
    description: "–ü–µ—Ä–µ—Ö–æ–¥ —Å 29 —Ñ–µ–≤—Ä–∞–ª—è –≤ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É",
    async test() {
      const date = new Date("2020-02-29");
      const next = date.nextDay();
      const expected = "2020-03-01";

      assert(
        next === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next}`
      );
    },
  },
  {
    description: "–ù–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ nextDay –Ω–µ –º–µ–Ω—è—é—Ç –∏—Å—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É",
    async test() {
      const date = new Date("2025-07-07");
      const next1 = date.nextDay();
      const next2 = date.nextDay();
      const expected = "2025-07-08";

      assert(
        next1 === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next1}`
      );
      assert(
        next2 === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${next2}`
      );
      assert(
        date.toISOString().slice(0, 10) === "2025-07-07",
        "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π"
      );
    },
  },
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Date.prototype.nextDay...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Date.prototype.nextDay –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

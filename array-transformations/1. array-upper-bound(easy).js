/**
 * –ó–∞–¥–∞—á–∞: LeetCode 2774. Array Upper Bound
 * 
 * –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤—Å–µ –º–∞—Å—Å–∏–≤—ã, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ upperBound() –Ω–∞ –ª—é–±–æ–º –º–∞—Å—Å–∏–≤–µ.
 * –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ target.
 *
 * nums ‚Äî —ç—Ç–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –¥—É–±–ª–∏–∫–∞—Ç—ã.
 * –ï—Å–ª–∏ target –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å -1.
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 *
 * Example 1:
 *   Input:  nums = [3, 4, 5], target = 5
 *   Output: 2
 *   –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è 5 ‚Äî 2
 *
 * Example 2:
 *   Input:  nums = [1, 4, 5], target = 2
 *   Output: -1
 *   –ü–æ—è—Å–Ω–µ–Ω–∏–µ: —á–∏—Å–ª–æ 2 –≤ –º–∞—Å—Å–∏–≤–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º -1
 *
 * Example 3:
 *   Input:  nums = [3, 4, 6, 6, 6, 6, 7], target = 6
 *   Output: 5
 *   –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è 6 ‚Äî 5
 *
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
 *   1 <= nums.length <= 10^4
 *   -10^4 <= nums[i], target <= 10^4
 *   nums –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
 *
 * –í–æ–ø—Ä–æ—Å: –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é O(log n)?
 */


Array.prototype.upperBound = function (target) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –Ω—É–ª—ë–º.
  // –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è target.
  let l = 0;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ (–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –¥–ª–∏–Ω–æ–π –º–∞—Å—Å–∏–≤–∞.
  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ ¬´–ø—Ä–∞–≤–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤¬ª.
  let r = this.length;

  // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫, –ø–æ–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω [l, r) –Ω–µ —Å–æ–º–∫–Ω—ë—Ç—Å—è
  while (l < r) {
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    // Math.floor –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å.
    const midd = Math.floor((l + r) / 2);

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å –∏—Å–∫–æ–º—ã–º target.
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ target, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    // –Ω–∞—á–∏–Ω–∞—è —Å midd –∏ –ø—Ä–∞–≤–µ–µ —Ç–æ–∂–µ –±–æ–ª—å—à–µ ‚Äî —Å—É–∑–∏–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–æ midd.
    if (this[midd] > target) r = midd;

    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω target,
    // –∑–Ω–∞—á–∏—Ç upperBound –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–µ–µ midd.
    else l = midd + 1;
  }

  // –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞ l === r ‚Äî —ç—Ç–æ –ø–æ–∑–∏—Ü–∏—è, –∫—É–¥–∞ –º–æ–≥ –±—ã –≤—Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–∏–π target.
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –º–∞—Å—Å–∏–≤–∞ [1,2,2,3] –∏ target = 2, —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ l = r = 3.
  // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:
  //   ‚Äî –¥–ª—è –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –æ—Ç 0 –¥–æ 2 (—Ç–æ –µ—Å—Ç—å < 3) —ç–ª–µ–º–µ–Ω—Ç –ª–∏–±–æ –º–µ–Ω—å—à–µ target (1), –ª–∏–±–æ —Ä–∞–≤–µ–Ω target (2);
  //   ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ 3 —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ target (3).

  // –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å, —Ä–∞–≤–Ω–æ–≥–æ target, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∞ —É—Å–ª–æ–≤–∏—è:
  // 1) l > 0 ‚Äî —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥ ¬´—Ç–æ—á–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏¬ª –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç.
  // 2) this[l - 1] == target ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–µ–Ω target.
  // –ï—Å–ª–∏ –æ–±–∞ —É—Å–ª–æ–≤–∏—è –≤–µ—Ä–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º l - 1, –∏–Ω–∞—á–µ ‚Äî -1 (target –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ).
  return l > 0 && this[l - 1] === target
    ? l - 1   // –æ–±–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è target
    : -1;     // –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: target –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ
};

















// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

const tests = [
  {
    description: "–ï–¥–∏–Ω–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–≤–µ–Ω target",
    async test() {
      const arr = [5];
      const result = arr.upperBound(5);
      const expected = 0;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–ï–¥–∏–Ω–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Ä–∞–≤–µ–Ω target",
    async test() {
      const arr = [5];
      const result = arr.upperBound(3);
      const expected = -1;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: target –≤ –Ω–∞—á–∞–ª–µ",
    async test() {
      const arr = [1, 2, 3];
      const result = arr.upperBound(1);
      const expected = 0;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: target –≤ –∫–æ–Ω—Ü–µ",
    async test() {
      const arr = [1, 2, 3];
      const result = arr.upperBound(3);
      const expected = 2;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: target –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ",
    async test() {
      const arr = [1, 2, 3, 4];
      const result = arr.upperBound(3);
      const expected = 2;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–î—É–±–ª–∏–∫–∞—Ç—ã: –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π target",
    async test() {
      const arr = [1, 2, 2, 2, 3];
      const result = arr.upperBound(2);
      const expected = 3;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã –∏ —Ä–∞–≤–Ω—ã target",
    async test() {
      const arr = [7, 7, 7, 7];
      const result = arr.upperBound(7);
      const expected = 3;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–î—É–±–ª–∏–∫–∞—Ç—ã, –Ω–æ target –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
    async test() {
      const arr = [1, 2, 2, 2, 3];
      const result = arr.upperBound(4);
      const expected = -1;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞: target –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ",
    async test() {
      const arr = [-3, -2, -1, 0, 1];
      const result = arr.upperBound(-2);
      const expected = 1;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "target –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞",
    async test() {
      const arr = [1, 2, 3];
      const result = arr.upperBound(0);
      const expected = -1;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
  {
    description: "target –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞",
    async test() {
      const arr = [1, 2, 3];
      const result = arr.upperBound(4);
      const expected = -1;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    },
  },
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Array.prototype.upperBound...");
  let hasErrors = false;
  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }
  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Array.prototype.upperBound –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();


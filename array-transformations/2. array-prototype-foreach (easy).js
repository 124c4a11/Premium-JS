/*
  LeetCode 2804. Array Prototype ForEach

  –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –≤–µ—Ä—Å–∏—é –º–µ—Ç–æ–¥–∞ forEach, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤—Å–µ –º–∞—Å—Å–∏–≤—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, 
  —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å array.forEach(callback, context) –Ω–∞ –ª—é–±–æ–º –º–∞—Å—Å–∏–≤–µ, 
  –∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–ª callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞. –ú–µ—Ç–æ–¥ forEach –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∏—á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å.

  callback –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:

  currentValue - —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞; –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
  index - –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
  array - —Å–∞–º –º–∞—Å—Å–∏–≤, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ callback.

  context ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–∑–æ–≤–∞ –¥–ª—è callback, 
  —á—Ç–æ–±—ã –≤–Ω—É—Ç—Ä–∏ callback –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ this —Å—Å—ã–ª–∞–ª–æ—Å—å –Ω–∞ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç.

  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–∞.

  –ü—Ä–∏–º–µ—Ä 1:
  Input:
    arr = [1, 2, 3]
    callback = (val, i, arr) => arr[i] = val * 2
    context = { "context": true }
  Output: [2, 4, 6]
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    arr.forEach(callback, context)
    console.log(arr) // [2, 4, 6]

  –ü—Ä–∏–º–µ—Ä 2:
  Input:
    arr = [true, true, false, false]
    callback = (val, i, arr) => arr[i] = this
    context = { "context": false }
  Output: [{ "context": false }, { "context": false }, { "context": false }, { "context": false }]
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    arr.forEach(callback, context)
    console.log(arr) // [{ "context": false }, ‚Ä¶]

  –ü—Ä–∏–º–µ—Ä 3:
  Input:
    arr = [true, true, false, false]
    callback = (val, i, arr) => arr[i] = !val
    context = { "context": 5 }
  Output: [false, false, true, true]

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    arr ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–º–∞—Å—Å–∏–≤
    context ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç
    fn ‚Äî —Ñ—É–Ω–∫—Ü–∏—è
    0 <= arr.length <= 10^5
*/



Array.prototype.forEach = function (callback, context) {
  for (let i = 0; i < this.length; ++i) {
    callback.call(context, this[i], i, this);
  }
};









// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

const tests = [
  {
    description: "–£–º–Ω–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ 2",
    async test() {
      const arr = [1, 2, 3];
      arr.forEach((val, i, a) => a[i] = val * 2);
      const expected = [2, 4, 6];
      assert(
        JSON.stringify(arr) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(arr)}`
      );
    }
  },
  {
    description: "–ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ this",
    async test() {
      const arr = [null, null, null];
      const context = { fill: 5 };
      arr.forEach(function(val, i, a) {
        a[i] = this.fill;
      }, context);
      const expected = [5, 5, 5];
      assert(
        JSON.stringify(arr) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(arr)}`
      );
    }
  },
  {
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ callback (value, index, array)",
    async test() {
      const arr = ['a', 'b', 'c'];
      const calls = [];
      arr.forEach(function(val, i, a) {
        calls.push([val, i, a]);
      });
      assert(calls.length === 3, `–û–∂–∏–¥–∞–ª–æ—Å—å 3 –≤—ã–∑–æ–≤–∞, –ø–æ–ª—É—á–µ–Ω–æ ${calls.length}`);
      assert(calls[1][0] === 'b', `–û–∂–∏–¥–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ 'b', –ø–æ–ª—É—á–µ–Ω–æ ${calls[1][0]}`);
      assert(calls[1][1] === 1, `–û–∂–∏–¥–∞–ª–æ—Å—å –∏–Ω–¥–µ–∫—Å 1, –ø–æ–ª—É—á–µ–Ω–æ ${calls[1][1]}`);
      assert(calls[1][2] === arr, `–û–∂–∏–¥–∞–ª–æ—Å—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤`);
    }
  },
  {
    description: "–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤: callback –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è",
    async test() {
      const arr = [];
      let count = 0;
      arr.forEach(() => count++);
      assert(count === 0, `–û–∂–∏–¥–∞–ª–æ—Å—å 0 –≤—ã–∑–æ–≤–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${count}`);
    }
  },
  {
    description: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
    async test() {
      const arr = [{}, {}];
      const context = { key: 'prop' };
      const value = 42;
      arr.forEach(function(val) {
        val[this.key] = value;
      }, context);
      arr.forEach(val => {
        assert(
          val.prop === value,
          `–û–∂–∏–¥–∞–ª–æ—Å—å —Å–≤–æ–π—Å—Ç–≤–æ prop = ${value}, –ø–æ–ª—É—á–µ–Ω–æ ${val.prop}`
        );
      });
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Array.prototype.forEach...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Array.prototype.forEach –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

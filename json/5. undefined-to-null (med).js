/**
 * –ó–∞–¥–∞—á–∞: LeetCode 2775. Undefined to Null
 * 
 * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é undefinedToNull, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
 * –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤ obj.
 * 
 * –¶–µ–ª—å —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –æ–±–æ–π—Ç–∏ –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É obj, –∏ –≤–µ–∑–¥–µ,
 * –≥–¥–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ undefined, –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ null.
 * 
 * –ó–Ω–∞—á–µ–Ω–∏—è undefined –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–Ω–∞—á–µ, —á–µ–º null –ø—Ä–∏
 * –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON-—Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é
 * JSON.stringify(). –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å
 * –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
 *
 * –ü—Ä–∏–º–µ—Ä 1:
 * Input:  obj = { "a": undefined, "b": 3 }
 * Output: { "a": null,      "b": 3 }
 * –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ obj.a –∏–∑–º–µ–Ω–µ–Ω–æ —Å undefined –Ω–∞ null.
 *
 * –ü—Ä–∏–º–µ—Ä 2:
 * Input:  obj = { "a": undefined, "b": ["a", undefined] }
 * Output: { "a": null,      "b": ["a", null] }
 * –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏—è obj.a –∏ obj.b[1] –∏–∑–º–µ–Ω–µ–Ω—ã
 * —Å undefined –Ω–∞ null.
 *
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
 * - obj —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON-–æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º.
 * - 2 <= JSON.stringify(obj).length <= 10^5.
 */


function undefinedToNull(obj) {
  for (const key in obj) {
    if (typeof obj[key] === 'object' && obj[key] !== null) {
      obj[key] = undefinedToNull(obj[key]);
    }

    if (obj[key] === undefined) {
      obj[key] = null;
    }
  }

  return obj;
}










// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

const tests = [
  {
    description: "–ü—Ä–æ—Å—Ç–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ undefined –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ null",
    async test() {
      const original = { a: undefined, b: 2 };
      const result = undefinedToNull(original);
      const expected = { a: null, b: 2 };

      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
      assert(
        result === original,
        "–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç"
      );
    },
  },

  {
    description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏",
    async test() {
      const original = { x: { y: { z: undefined } }, k: undefined };
      const result = undefinedToNull(original);
      const expected = { x: { y: { z: null } }, k: null };

      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },

  {
    description: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ undefined –≤ –º–∞—Å—Å–∏–≤–∞—Ö –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö",
    async test() {
      const original = {
        arr: [1, undefined, 3, { nested: undefined, keep: 5 }],
      };
      const result = undefinedToNull(original);
      const expected = {
        arr: [1, null, 3, { nested: null, keep: 5 }],
      };

      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },

  {
    description: "–û–±—ä–µ–∫—Ç –±–µ–∑ undefined –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
    async test() {
      const original = { a: 1, b: false, c: 0, d: "" };
      const copy = JSON.stringify(original);
      const result = undefinedToNull(original);

      assert(
        JSON.stringify(result) === copy,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${copy}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
      assert(
        result === original,
        "–î–ª—è –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ undefined –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Ç–∞ –∂–µ —Å—Å—ã–ª–∫–∞"
      );
    },
  },

  {
    description: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
    async test() {
      const original = {};
      const result = undefinedToNull(original);
      const expected = {};

      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },

  {
    description: "–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –Ω–∞ –º–∞—Å—Å–∏–≤–µ",
    async test() {
      const original = [undefined, { a: undefined }, 2];
      const result = undefinedToNull(original);
      const expected = [null, { a: null }, 2];

      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
      assert(
        result === original,
        "–ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –º–∞—Å—Å–∏–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –º–∞—Å—Å–∏–≤"
      );
    },
  },
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è undefinedToNull...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è undefinedToNull –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

/*
  LeetCode 2822. Inversion of Object

  –î–∞–Ω—ã –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤ obj. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤ invertedObj.

  –í invertedObj –∫–ª—é—á–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ obj —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ obj ‚Äî –∫–ª—é—á–∞–º–∏.
  –ò–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ —Å–ª–µ–¥—É–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫ –∫–ª—é—á–∏. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ obj ‚Äî —Å—Ç—Ä–æ–∫–∏.
  –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—É–±–ª–∏: –µ—Å–ª–∏ –≤ obj –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –∏–º–µ—é—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
  —Ç–æ –≤ invertedObj —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏.

  –ü—Ä–∏–º–µ—Ä—ã:

  1) –í—Ö–æ–¥: obj = {"a": "1", "b": "2", "c": "3", "d": "4"}  
    –í—ã—Ö–æ–¥: invertedObj = {"1": "a", "2": "b", "3": "c", "4": "d"}

  2) –í—Ö–æ–¥: obj = {"a": "1", "b": "2", "c": "2", "d": "4"}  
    –í—ã—Ö–æ–¥: invertedObj = {"1": "a", "2": ["b", "c"], "4": "d"}

  3) –í—Ö–æ–¥: obj = ["1", "2", "3", "4"]  
    –í—ã—Ö–æ–¥: invertedObj = {"1": "0", "2": "1", "3": "2", "4": "3"}

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
  - obj ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤  
  - typeof obj[key] === "string"  
  - 2 <= JSON.stringify(obj).length <= 10^5
*/



/*
  –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ invertObject,
  –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä obj ‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç,
  –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º
  –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è obj —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∫–ª—é—á–∞–º–∏,
  –∞ –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–ª—é—á–∏ obj ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
*/
function invertObject(obj) {

  /*
    –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç result,
    –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.
  */
  const result = {};

  /*
    –¶–∏–∫–ª for-in –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–∏–º—ã–º —Å–≤–æ–π—Å—Ç–≤–∞–º obj.
    –û–Ω –∑–∞—Ö–≤–∞—Ç–∏—Ç –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è.
    –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞,
    –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –ø—Ä–æ–≤–µ—Ä–∫—É: if (Object.hasOwn(obj, key)).
  */
  for (const key in obj) {

    /*
      –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞ key.
      –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º (string, number, boolean, null, undefined)
      –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º/–º–∞—Å—Å–∏–≤–æ–º/—Ñ—É–Ω–∫—Ü–∏–µ–π.
    */
    const value = obj[key];

    /*
      –í JS –≤—Å–µ –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ ‚Äî —Å—Ç—Ä–æ–∫–∏.
      –ü–æ—ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ value –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –∫ —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞.
      –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ result —Ç–∞–∫–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞.
      –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π,
      —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–∫–∞–∑–∞–ª–æ—Å—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    */
    if (Object.hasOwn(result, value)) {

      /*
        –ï—Å–ª–∏ –ø–æ —Ç–∞–∫–æ–º—É –∫–ª—é—á—É —É–∂–µ –ª–µ–∂–∏—Ç –º–∞—Å—Å–∏–≤,
        –∑–Ω–∞—á–∏—Ç –º—ã —Ä–∞–Ω—å—à–µ —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º —ç—Ç–æ–≥–æ value
        –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –∫–ª—é—á–∞ –≤ –º–∞—Å—Å–∏–≤.
      */
      if (Array.isArray(result[value])) {
        /*
          –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –∫–æ–Ω–µ—Ü —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∫–ª—é—á–µ–π.
        */
        result[value].push(key);
      } else {
        /*
          –ï—Å–ª–∏ –∂–µ –≤ result[value] –ø–æ–∫–∞ –æ–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî
          –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á (—Å—Ç—Ä–æ–∫–∞),
          —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–π.
        */
        result[value] = [result[value], key];
      }

    } else {
      /*
        –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –µ—â—ë –Ω–µ—Ç,
        –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ result –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ key.
        –¢–µ–ø–µ—Ä—å –≤ result –∑–Ω–∞—á–µ–Ω–∏–µ value –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á key.
      */
      result[value] = key;
    }
  }

  /*
    –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –≤ result —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –ø–∞—Ä—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
  */
  return result;
}










// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ invertObject */
const tests = [
  {
    description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
    async test() {
      const obj = { a: 1, b: 2, c: 3 };
      const expected = { "1": "a", "2": "b", "3": "c" };
      const result = invertObject(obj);
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
    async test() {
      const obj = { a: 1, b: 1, c: 2 };
      const expected = { "1": ["a", "b"], "2": "c" };
      const result = invertObject(obj);
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
    async test() {
      const obj = { x: "foo", y: "foo", z: "bar" };
      const expected = { "foo": ["x", "y"], "bar": "z" };
      const result = invertObject(obj);
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π (boolean, null)",
    async test() {
      const obj = { a: true, b: false, c: false, d: null };
      const expected = { "true": "a", "false": ["b", "c"], "null": "d" };
      const result = invertObject(obj);
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç",
    async test() {
      const obj = {};
      const expected = {};
      const result = invertObject(obj);
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ó–Ω–∞—á–µ–Ω–∏—è-–æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ —Å—Ç—Ä–æ–∫–µ",
    async test() {
      const val = {};
      const obj = { p: val, q: val };
      const expected = { "[object Object]": ["p", "q"] };
      const result = invertObject(obj);
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ú–∞—Å—Å–∏–≤ –∫–∞–∫ –≤—Ö–æ–¥–Ω–æ–π –æ–±—ä–µ–∫—Ç",
    async test() {
      const arr = [1, 2, 1];
      const expected = { "1": ["0", "2"], "2": "1" };
      const result = invertObject(arr);
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
];

/* –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫ */
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è invertObject...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    const { description, test } = tests[i];
    try {
      await test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${description}`);
      console.error(`   –û—à–∏–±–∫–∞: ${e.message}`);
      console.error(`   –°—Ç–µ–∫:\n${e.stack.split('\n').slice(1).map(line => '     ' + line).join('\n')}`);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è invertObject –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

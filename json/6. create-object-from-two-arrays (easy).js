/*
  LeetCode 2794. Create Object from Two Arrays

  –î–∞–Ω—ã –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ keysArr –∏ valuesArr. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç obj,
  –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ ¬´–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ¬ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ keysArr[i] –∏ valuesArr[i].

  –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–ª—é—á–∞ (–ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É) —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ
  –µ–≥–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ.

  –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ keysArr –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤–µ–¥—ë–Ω
  –∫ —Å—Ç—Ä–æ–∫–µ —Å –ø–æ–º–æ—â—å—é String().

  –ü—Ä–∏–º–µ—Ä—ã:
    1) keysArr = ["a", "b", "c"], valuesArr = [1, 2, 3]
       // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç: { "a": 1, "b": 2, "c": 3 }

    2) keysArr = ["1", 1, false], valuesArr = [4, 5, 6]
       // –ø–æ—Å–ª–µ String(): ["1", "1", "false"]
       // –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–ª—é—á–∞ "1" —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 4,
       // –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ "1" –ø–∞—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è,
       // –∞ –∫–ª—é—á "false" —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 6
       // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç: { "1": 4, "false": 6 }

    3) keysArr = [], valuesArr = []
       // –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    - keysArr –∏ valuesArr ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON-–º–∞—Å—Å–∏–≤—ã
    - 2 ‚â§ –¥–ª–∏–Ω–∞ JSON.stringify(keysArr), JSON.stringify(valuesArr) ‚â§ 5¬∑10^5
    - keysArr.length === valuesArr.length
*/


function createObject(keysArr, valuesArr) {
  const obj = {};

  for (let i = 0; i < keysArr.length; ++i) {
    const key = String(keysArr[i]);

    if (Object.hasOwn(obj, key)) continue;

    obj[key] = valuesArr[i];
  }

  return obj;
}











// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/*
  –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ createObject.
*/
const tests = [
  {
    description: "–ü—Ä–æ—Å—Ç–∞—è –º–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–ª—é—á–µ–π",
    async test() {
      const keys = ["a", "b", "c"];
      const values = [1, 2, 3];
      const result = createObject(keys, values);
      const expected = { a: 1, b: 2, c: 3 };
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–ª—é—á–∞",
    async test() {
      const keys = ["x", "y", "x", "z"];
      const values = [10, 20, 30, 40];
      const result = createObject(keys, values);
      const expected = { x: 10, y: 20, z: 40 };
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ö–æ–ª–ª–∏–∑–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∏ —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–ª—é—á–∞",
    async test() {
      const keys = ["1", 1, 2];
      const values = [100, 200, 300];
      const result = createObject(keys, values);
      const expected = { "1": 100, "2": 300 };
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ù–µ—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏: boolean, null, undefined",
    async test() {
      const keys = [true, false, null, undefined];
      const values = ["T", "F", "N", "U"];
      const result = createObject(keys, values);
      const expected = { true: "T", false: "F", null: "N", undefined: "U" };
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ö–ª—é—á-–æ–±—ä–µ–∫—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ [object Object], –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è",
    async test() {
      const objKey = { a: 1 };
      const keys = [objKey, objKey];
      const values = [5, 6];
      const result = createObject(keys, values);
      const expected = { "[object Object]": 5 };
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ü—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –Ω–∞ –≤—Ö–æ–¥–µ ‚Äî –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç",
    async test() {
      const result = createObject([], []);
      const expected = {};
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ–¥–Ω–æ–º—É –∫–ª—é—á—É",
    async test() {
      const keys = ["", []];
      const values = [7, 8];
      const result = createObject(keys, values);
      const expected = { "": 7 };
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è createObject...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è createObject –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

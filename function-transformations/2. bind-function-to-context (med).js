/**
 * LeetCode 2754. –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
 *
 * –†–∞—Å—à–∏—Ä—å—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º bindPolyfill. –ü—Ä–∏ –≤—ã–∑–æ–≤–µ bindPolyfill
 * —Å –æ–±—ä–µ–∫—Ç–æ–º obj —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º this –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:
 *   function f() { console.log('–ú–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ' + this.ctx); }
 *   f(); // "–ú–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç undefined"
 *   const boundFunc = f.bindPolyfill({ ctx: "–ú–æ–π –æ–±—ä–µ–∫—Ç" });
 *   boundFunc(); // "–ú–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ú–æ–π –æ–±—ä–µ–∫—Ç"
 *
 * –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≤ bindPolyfill –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç.
 * –†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Function.prototype.bind.
 *
 * –ü—Ä–∏–º–µ—Ä 1:
 * –í—Ö–æ–¥:
 *   fn = function f(multiplier) { return this.x * multiplier; }
 *   obj = { x: 10 }
 *   inputs = [5]
 * –í—ã–≤–æ–¥: 50
 * –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
 *   const boundFunc = f.bindPolyfill({ x: 10 });
 *   boundFunc(5); // 50, –ø–æ—Ç–æ–º—É —á—Ç–æ this.x = 10 –∏ multiplier = 5
 *
 * –ü—Ä–∏–º–µ—Ä 2:
 * –í—Ö–æ–¥:
 *   fn = function speak() { return "–ú–µ–Ω—è –∑–æ–≤—É—Ç " + this.name; }
 *   obj = { name: "Kathy" }
 *   inputs = []
 * –í—ã–≤–æ–¥: "–ú–µ–Ω—è –∑–æ–≤—É—Ç Kathy"
 * –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
 *   const boundFunc = f.bindPolyfill({ name: "Kathy" });
 *   boundFunc(); // "–ú–µ–Ω—è –∑–æ–≤—É—Ç Kathy"
 *
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
 * - obj ‚Äî –Ω–µ–ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
 * - 0 <= inputs.length <= 100
 * - –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã bind
 */


Function.prototype.bindPolyfill = function (context) {
  const originalFn = this;

  return function() {
    return originalFn.apply(context, arguments);
  }
};







function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞:
// –≤—ã–∑—ã–≤–∞–µ—Ç fn.bindPolyfill(context), –∑–∞—Ç–µ–º boundFn(...inputs),
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { value, error } –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
function run(fn, context, inputs) {
  try {
    const boundFn = fn.bindPolyfill(context);
    const value = boundFn(...inputs);
    return { value, error: null };
  } catch (e) {
    return { value: null, error: e.message };
  }
}

// –¢–µ—Å—Ç—ã –¥–ª—è bindPolyfill
const tests = [
  {
    description: "–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
    async test() {
      function fn() { return this.val; }
      const obj = { val: 42 };
      const result = run(fn, obj, []);
      assert(
        result.error === null && result.value === 42,
        `–û–∂–∏–¥–∞–ª–æ—Å—å value=42, error=null; –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ü—Ä–∏–≤—è–∑–∫–∞ —Å –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º",
    async test() {
      function fn(x) { return this.factor * x; }
      const obj = { factor: 10 };
      const result = run(fn, obj, [5]);
      assert(
        result.error === null && result.value === 50,
        `–û–∂–∏–¥–∞–ª–æ—Å—å value=50, error=null; –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ü—Ä–∏–≤—è–∑–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏",
    async test() {
      function fn(a, b) { return this.base + a + b; }
      const obj = { base: 1 };
      const result = run(fn, obj, [2, 3]);
      assert(
        result.error === null && result.value === 6,
        `–û–∂–∏–¥–∞–ª–æ—Å—å value=6, error=null; –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–î–≤–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
    async test() {
      function fn(n) { return this.mult * n; }
      const obj1 = { mult: 2 };
      const obj2 = { mult: 3 };
      const r1 = run(fn, obj1, [4]);
      const r2 = run(fn, obj2, [4]);
      assert(
        r1.error === null && r1.value === 8,
        `–î–ª—è obj1 –æ–∂–∏–¥–∞–ª–æ—Å—å 8, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(r1)}`
      );
      assert(
        r2.error === null && r2.value === 12,
        `–î–ª—è obj2 –æ–∂–∏–¥–∞–ª–æ—Å—å 12, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(r2)}`
      );
    },
  },
  {
    description: "–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
    async test() {
      function fn(x) { return this.getValue(x); }
      const obj = { getValue(n) { return n + 5; } };
      const result = run(fn, obj, [3]);
      assert(
        result.error === null && result.value === 8,
        `–û–∂–∏–¥–∞–ª–æ—Å—å value=8, error=null; –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–≤–æ–π—Å—Ç–≤–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç undefined",
    async test() {
      function fn() { return this.missing; }
      const obj = {};
      const result = run(fn, obj, []);
      assert(
        result.error === null && result.value === undefined,
        `–û–∂–∏–¥–∞–ª–æ—Å—å value=undefined, error=null; –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏",
    async test() {
      function fn(prefix) { return prefix + this.suffix; }
      const obj = { suffix: "World" };
      const result = run(fn, obj, ["Hello "]);
      assert(
        result.error === null && result.value === "Hello World",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "Hello World", –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–ª–∏—á–∞–µ—Ç –æ—Ç null",
    async test() {
      function fn() { return this.empty; }
      const obj1 = { empty: 0 };
      const obj2 = { empty: "" };
      const r1 = run(fn, obj1, []);
      const r2 = run(fn, obj2, []);
      assert(
        r1.error === null && r1.value === 0,
        `–û–∂–∏–¥–∞–ª–æ—Å—å value=0; –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(r1)}`
      );
      assert(
        r2.error === null && r2.value === "",
        `–û–∂–∏–¥–∞–ª–æ—Å—å value=""; –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(r2)}`
      );
    },
  },
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
; (async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è bindPolyfill...");
  let hasErrors = false;
  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }
  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è bindPolyfill –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

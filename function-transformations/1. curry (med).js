/*
  –ó–∞–¥–∞—á–∞: https://learn.javascript.ru/currying-partials
*/

function curry(fn) {
  return function curried(...args) {
    if (args.length >= fn.length) {
      return fn.apply(this, args);
    }

    return function pass(...args2) {
      return curried.apply(this, args.concat(args2));
    }
  }
}


















/*
  function curry(fn) {
    return function curried(...args) {
      if (args.length >= fn.length) {
        return fn.apply(this, args);
      }

      return function pass(...args2) {
        return curried.apply(this, args.concat(args2));
      }
    }
  }

  –ö–æ–≥–¥–∞ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë, –µ—Å—Ç—å –¥–≤–µ –≤–µ—Ç–≤–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è if:

    1. –í—ã–∑–≤–∞—Ç—å —Å–µ–π—á–∞—Å: –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (func.length) –∏–ª–∏ –±–æ–ª—å—à–µ, —Ç–æ–≥–¥–∞ –≤—ã–∑–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –Ω–µ–π.

    2. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ func –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –æ–±—ë—Ä—Ç–∫–∞ pass, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–æ–≤–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç curried, –ø–µ—Ä–µ–¥–∞–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ —Å –Ω–æ–≤—ã–º–∏. –ó–∞—Ç–µ–º –ø—Ä–∏ –Ω–æ–≤–æ–º –≤—ã–∑–æ–≤–µ –º—ã –æ–ø—è—Ç—å –ø–æ–ª—É—á–∏–º –ª–∏–±–æ –Ω–æ–≤–æ–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ) –ª–∏–±–æ, –Ω–∞–∫–æ–Ω–µ—Ü, —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

  –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Å–ª—É—á–∞–µ sum(a, b, c). –£ –Ω–µ—ë —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ç–∞–∫ —á—Ç–æ sum.length = 3.

  –î–ª—è –≤—ã–∑–æ–≤–∞ curried(1)(2)(3):

    1. –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ curried(1) –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç 1 –≤ —Å–≤–æ—ë–º –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ë—Ä—Ç–∫—É pass.

    2. –û–±—ë—Ä—Ç–∫–∞ pass –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å (2): –æ–Ω–∞ –±–µ—Ä—ë—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (1), –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö —Å —Ç–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∞ —Å–∞–º–∞ (2) –∏ –≤—ã–∑—ã–≤–∞–µ—Ç curried(1, 2) —Å–æ –≤—Å–µ–º–∏ –Ω–∏–º–∏. –¢–∞–∫ –∫–∞–∫ —á–∏—Å–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤—Å—ë –µ—â—ë –º–µ–Ω—å—à–µ 3-—Ö, curry –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç pass.

    3. –û–±—ë—Ä—Ç–∫–∞ pass –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–Ω–æ–≤–∞ —Å (3). –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ pass(3) –±–µ—Ä—ë—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (1, 2) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–∏–º 3, –¥–µ–ª–∞—è –≤—ã–∑–æ–≤ curried(1, 2, 3) ‚Äì –Ω–∞–∫–æ–Ω–µ—Ü 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
*/






// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ curry. 
   –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è curry –æ–ø–∏—Å–∞–Ω–∞ –≤—ã—à–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. */
const tests = [
  {
    description: "–ü–æ–ª–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω —à–∞–≥",
    async test() {
      const sum = (a, b, c) => a + b + c;
      const curriedSum = curry(sum);
      const result = curriedSum(1, 2, 3);
      assert(result === 6, `–û–∂–∏–¥–∞–ª–æ—Å—å 6, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  },
  {
    description: "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–≤–∞ —à–∞–≥–∞",
    async test() {
      const sum = (a, b, c) => a + b + c;
      const curried = curry(sum);
      const addOne = curried(1);
      const result = addOne(2, 3);
      assert(result === 6, `–û–∂–∏–¥–∞–ª–æ—Å—å 6, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  },
  {
    description: "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–º—è —à–∞–≥–∞–º–∏",
    async test() {
      const sum = (a, b, c) => a + b + c;
      const curried = curry(sum);
      const result = curried(1)(2)(3);
      assert(result === 6, `–û–∂–∏–¥–∞–ª–æ—Å—å 6, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  },
  {
    description: "–§—É–Ω–∫—Ü–∏—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
    async test() {
      const zero = () => 42;
      const curriedZero = curry(zero);
      const result = curriedZero();
      assert(result === 42, `–û–∂–∏–¥–∞–ª–æ—Å—å 42, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  },
  {
    description: "–§—É–Ω–∫—Ü–∏—è —Å –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: –ø—Ä—è–º–æ–µ –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
    async test() {
      const double = x => x * 2;
      const curriedDouble = curry(double);
      const direct = curriedDouble(5);
      const delayed = curriedDouble()(6);
      assert(direct === 10, `–û–∂–∏–¥–∞–ª–æ—Å—å 10, –ø–æ–ª—É—á–µ–Ω–æ ${direct}`);
      assert(delayed === 12, `–û–∂–∏–¥–∞–ª–æ—Å—å 12, –ø–æ–ª—É—á–µ–Ω–æ ${delayed}`);
    },
  },
  {
    description: "–†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
    async test() {
      const sum = (a, b, c) => a + b + c;
      const curried = curry(sum);
      assert(curried(1, 2)(3) === 6, `curried(1,2)(3) –æ–∂–∏–¥–∞–µ—Ç 6`);
      assert(curried(1)(2, 3) === 6, `curried(1)(2,3) –æ–∂–∏–¥–∞–µ—Ç 6`);
      assert(curried(1)(2)(3) === 6, `curried(1)(2)(3) –æ–∂–∏–¥–∞–µ—Ç 6`);
    },
  },
  {
    description: "–ü–µ—Ä–µ–¥–∞—á–∞ –ª–∏—à–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
    async test() {
      const join = function (a, b) {
        return Array.prototype.slice.call(arguments);
      };
      const curriedJoin = curry(join);
      const result = curriedJoin(1, 2, 3, 4);
      assert(Array.isArray(result), `–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤, –ø–æ–ª—É—á–µ–Ω–æ ${typeof result}`);
      assert(result.length === 4, `–û–∂–∏–¥–∞–ª–∞—Å—å –¥–ª–∏–Ω–∞ 4, –ø–æ–ª—É—á–µ–Ω–æ ${result.length}`);
      assert(
        JSON.stringify(result) === JSON.stringify([1, 2, 3, 4]),
        `–û–∂–∏–¥–∞–ª—Å—è [1,2,3,4], –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ this –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏",
    async test() {
      const fn = function (y) {
        return this.x + y;
      };
      const obj = { x: 10, f: curry(fn) };
      const result = obj.f(5);
      assert(result === 15, `–û–∂–∏–¥–∞–ª–æ—Å—å 15, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ curry...");
  let hasErrors = false;
  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }
  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ curry –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

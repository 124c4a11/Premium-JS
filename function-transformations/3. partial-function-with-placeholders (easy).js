/*
  LeetCode 2797. Partial Function with Placeholders

  –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:
  –î–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è fn –∏ –º–∞—Å—Å–∏–≤ args. –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é partialFn.

  –ü—Ä–∏ –≤—ã–∑–æ–≤–µ partialFn(...restArgs):
  - –í—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã "_" –≤ args –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ restArgs –ø–æ –ø–æ—Ä—è–¥–∫—É (–Ω–∞—á–∏–Ω–∞—è —Å restArgs[0]).
  - –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ restArgs –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ args.
  - –ó–∞—Ç–µ–º fn –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è –º–∞—Å—Å–∏–≤–∞ args –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

  –ü—Ä–∏–º–µ—Ä—ã:

  –ü—Ä–∏–º–µ—Ä 1:
  Input: fn = (...args) => args, args = [2, 4, 6], restArgs = [8, 10]  
  Output: [2, 4, 6, 8, 10]  
  –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
  const partialFn = partial(fn, args);  
  const result = partialFn(...restArgs); // [2, 4, 6, 8, 10]

  –ü—Ä–∏–º–µ—Ä 2:
  Input: fn = (...args) => args, args = [1, 2, "_", 4, "_", 6], restArgs = [3, 5]  
  Output: [1, 2, 3, 4, 5, 6]  
  –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
  const partialFn = partial(fn, args);  
  const result = partialFn(...restArgs); // [1, 2, 3, 4, 5, 6]

  –ü—Ä–∏–º–µ—Ä 3:
  Input: fn = (a, b, c) => b + a - c, args = ["_", 5], restArgs = [5, 20]  
  Output: -10  
  –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
  const partialFn = partial(fn, args);  
  const result = partialFn(...restArgs); // -10

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
  - fn ‚Äî —Ñ—É–Ω–∫—Ü–∏—è
  - args –∏ restArgs ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON-–º–∞—Å—Å–∏–≤—ã
  - 1 <= args.length <= 5 * 10^4
  - 1 <= restArgs.length <= 5 * 10^4
  - —á–∏—Å–ª–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ "_" –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç restArgs.length
*/



function partial(fn, args) {

  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—ë—Ä—Ç–∫—É, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é
  // –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  return function (...restArgs) {

    // —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ –ø–æ restArgs
    let i = 0;

    // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞ args
    for (let j = 0; j < args.length; ++j) {

      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è
      // –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ '_'
      if (args[j] !== '_') continue;

      // –∑–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
      // –∏–∑ restArgs
      args[j] = restArgs[i++];
    }

    // –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å
    // –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω–µ—Ü
    while (i < restArgs.length) {
      args.push(restArgs[i++]);
    }
    
    // –≤—ã–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fn —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    // —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º args
    return fn.apply(this, args);
  };
};









// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

const tests = [
  {
    description: "–ù–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ restArgs –≤ –∫–æ–Ω–µ—Ü",
    async test() {
      const fn = (...args) => args;
      const partialFn = partial(fn, [1, 2, 3]);
      const result = partialFn(4, 5);
      const expected = [1, 2, 3, 4, 5];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –∂–µ restArgs",
    async test() {
      const fn = (...args) => args;
      const partialFn = partial(fn, ["_", "_", "_"]);
      const result = partialFn("a", "b", "c");
      const expected = ["a", "b", "c"];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∏ –æ—Å—Ç–∞—Ç–æ–∫ restArgs –≤ –∫–æ–Ω–µ—Ü",
    async test() {
      const fn = (...args) => args;
      const partialFn = partial(fn, ["_", 2, "_"]);
      const result = partialFn(1, 3, 4);
      const expected = [1, 2, 3, 4];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ –∫—Ä–∞—è—Ö –º–∞—Å—Å–∏–≤–∞",
    async test() {
      const fn = (...args) => args;
      const partialFn = partial(fn, ["_", "X", "_"]);
      const result = partialFn("A", "B");
      const expected = ["A", "X", "B"];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–§—É–Ω–∫—Ü–∏—è —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø—Ä–∏–º–µ—Ä –∏–∑ —É—Å–ª–æ–≤–∏—è",
    async test() {
      const fn = (a, b, c) => b + a - c;
      const partialFn = partial(fn, ["_", 5]);
      const result = partialFn(5, 20);
      const expected = -10;
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    }
  },
  {
    description: "–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏",
    async test() {
      const fn = (...args) => args.join("");
      const partialFn = partial(fn, ["Hello", "_", "!"]);
      const result = partialFn("World");
      const expected = "HelloWorld!";
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å "${expected}", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`
      );
    }
  },
  {
    description: "–°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã ‚Äî —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è",
    async test() {
      const fn = (...args) => args;
      const partialFn = partial(fn, [true, "_", null, "_"]);
      const result = partialFn(false, 42);
      const expected = [true, false, null, 42];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ç—ã—Ä—ë—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏–µ",
    async test() {
      const sum4 = (a, b, c, d) => a + b + c + d;
      const partialFn = partial(sum4, ["_", 2, "_", 4]);
      const result = partialFn(1, 3);
      const expected = 10; // 1 + 2 + 3 + 4
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`
      );
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è partial...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è partial –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

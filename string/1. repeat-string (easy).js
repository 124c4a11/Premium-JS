/*
  LeetCode 2796. Repeat String

  –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:
  –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –Ω–∞ –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ 
  replicate(x),
  –∏ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å—Ç—Ä–æ–∫—É, –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω—É—é x —Ä–∞–∑.

  –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç–æ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ repeat.

  –ü—Ä–∏–º–µ—Ä—ã:
  1. –í—Ö–æ–¥: str = "hello", times = 2
    –í—ã—Ö–æ–¥: "hellohello"
    –ü–æ—è—Å–Ω–µ–Ω–∏–µ: "hello" –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è 2 —Ä–∞–∑–∞

  2. –í—Ö–æ–¥: str = "code", times = 3
    –í—ã—Ö–æ–¥: "codecodecode"
    –ü–æ—è—Å–Ω–µ–Ω–∏–µ: "code" –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è 3 —Ä–∞–∑–∞

  3. –í—Ö–æ–¥: str = "js", times = 1
    –í—ã—Ö–æ–¥: "js"
    –ü–æ—è—Å–Ω–µ–Ω–∏–µ: "js" –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è 1 —Ä–∞–∑

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
  1 <= str.length, times <= 10^5
*/

String.prototype.replicate = function (times) {
  let result = '';

  for (let i = 0; i < times; i++) {
    result += this;
  }

  return result;
};








// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

const tests = [
  {
    description: "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑",
    async test() {
      const result = "hello".replicate(2);
      const expected = "hellohello";
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å "${expected}", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`
      );
    }
  },
  {
    description: "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª",
    async test() {
      const input = "js";
      const result = input.replicate(1);
      const expected = "js";
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å "${expected}", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`
      );
    }
  },
  {
    description: "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ª—é–±–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—ë —Ç–∞ –∂–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
    async test() {
      const result1 = "".replicate(5);
      const result2 = "".replicate(1);
      assert(
        result1 === "",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "", –ø–æ–ª—É—á–µ–Ω–æ "${result1}"`
      );
      assert(
        result2 === "",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "", –ø–æ–ª—É—á–µ–Ω–æ "${result2}"`
      );
    }
  },
  {
    description: "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ–π –±—É–∫–≤—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑",
    async test() {
      const result = "a".replicate(5);
      const expected = "aaaaa";
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å "${expected}", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`
      );
    }
  },
  {
    description: "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏",
    async test() {
      const input = "ab cd";
      const result = input.replicate(3);
      const expected = "ab cdab cdab cd";
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å "${expected}", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`
      );
    }
  },
  {
    description: "–ú–µ—Ç–æ–¥ replicate –¥–æ—Å—Ç—É–ø–µ–Ω —É –æ–±—ä–µ–∫—Ç–æ–≤ String",
    async test() {
      const strObj = new String("X");
      const result = strObj.replicate(4);
      const expected = "XXXX";
      assert(
        result === expected,
        `–û–∂–∏–¥–∞–ª–æ—Å—å "${expected}", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`
      );
    }
  },
  {
    description: "–ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫–µ)",
    async test() {
      const times = 10000;
      const part = "z";
      const result = part.replicate(times);
      assert(
        result.length === times,
        `–û–∂–∏–¥–∞–ª–æ—Å—å –¥–ª–∏–Ω—É ${times}, –ø–æ–ª—É—á–µ–Ω–æ ${result.length}`
      );
      // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
      assert(
        result[0] === "z" && result[result.length - 1] === "z",
        `–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ "${part}", –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ "${result.slice(0, 1)}...${result.slice(-1)}"`
      );
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è String.prototype.replicate...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è String.prototype.replicate —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã.");
  }
})();

/*
  –ó–∞–¥–∞—á–∞: LeetCode 2777. Date Range Generator

  –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:
  –î–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ start, –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ end –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ step.
  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—ë—Ç –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ end –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
  –í—Å–µ –¥–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.
  –ü–∞—Ä–∞–º–µ—Ç—Ä step –∑–∞–¥–∞—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

  –ü—Ä–∏–º–µ—Ä 1:
  –í—Ö–æ–¥:  start = "2023-04-01", end = "2023-04-04", step = 1
  –í—ã—Ö–æ–¥: ["2023-04-01","2023-04-02","2023-04-03","2023-04-04"]
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    const g = dateRangeGenerator(start, end, step);
    g.next().value // '2023-04-01'
    g.next().value // '2023-04-02'
    g.next().value // '2023-04-03'
    g.next().value // '2023-04-04'

  –ü—Ä–∏–º–µ—Ä 2:
  –í—Ö–æ–¥:  start = "2023-04-10", end = "2023-04-20", step = 3
  –í—ã—Ö–æ–¥: ["2023-04-10","2023-04-13","2023-04-16","2023-04-19"]
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    const g = dateRangeGenerator(start, end, step);
    g.next().value // '2023-04-10'
    g.next().value // '2023-04-13'
    g.next().value // '2023-04-16'
    g.next().value // '2023-04-19'

  –ü—Ä–∏–º–µ—Ä 3:
  –í—Ö–æ–¥:  start = "2023-04-10", end = "2023-04-10", step = 1
  –í—ã—Ö–æ–¥: ["2023-04-10"]
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    const g = dateRangeGenerator(start, end, step);
    g.next().value // '2023-04-10'

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    new Date(start) <= new Date(end)
    0 <= —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É start –∏ end <= 1000
    1 <= step <= 100
*/


/*
  –û–±—ä—è–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é dateRangeGenerator, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
    - start ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π 
    - end ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–æ–π, step ‚Äî —á–∏—Å–ª–æ –¥–Ω–µ–π —à–∞–≥–∞
  –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞: 
  dateRangeGenerator('2021-01-01', '2021-01-05', 2)
*/
function* dateRangeGenerator(start, end, step) {

  /*
    –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –∏–∑ —Å—Ç—Ä–æ–∫–∏ end.
    new Date('2021-01-05') –¥–∞—Å—Ç –æ–±—ä–µ–∫—Ç —Å –¥–∞—Ç–æ–π 5 —è–Ω–≤–∞—Ä—è 2021 –≥–æ–¥–∞
  */
  const endDate = new Date(end);

  /*
    –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –∏–∑ —Å—Ç—Ä–æ–∫–∏ start.
    new Date('2021-01-01') –¥–∞—Å—Ç –æ–±—ä–µ–∫—Ç —Å –¥–∞—Ç–æ–π 1 —è–Ω–≤–∞—Ä—è 2021 –≥–æ–¥–∞
  */
  let currDate = new Date(start);

  /*
    –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, 
    –ø–æ–∫–∞ currDate <= endDate.
    –ü—Ä–∏–º–µ—Ä: 2021-01-01 <= 2021-01-05 ‚Äî —Ü–∏–∫–ª —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
  */
  while (currDate <= endDate) {

    /* 
      –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".
      currDate.toISOString() -> "2021-01-01T00:00:00.000Z", 
      slice(0,10) -> "2021-01-01"
    */
    yield currDate.toISOString().slice(0, 10);

    /* 
      –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ currDate –∑–Ω–∞—á–µ–Ω–∏–µ step (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π).
      –ï—Å–ª–∏ step = 2, —Ç–æ 1 —è–Ω–≤–∞—Ä—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ 3 —è–Ω–≤–∞—Ä—è:
      currDate.getDate() = 1, + 2 = 3
    */
    currDate.setDate(currDate.getDate() + step);
  }
}










// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ dateRangeGenerator */
const tests = [
  {
    description: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —à–∞–≥ –æ—Ç 2021-01-01 –¥–æ 2021-01-05",
    async test() {
      const gen = dateRangeGenerator("2021-01-01", "2021-01-05", 1);
      const result = [...gen];
      const expected = [
        "2021-01-01",
        "2021-01-02",
        "2021-01-03",
        "2021-01-04",
        "2021-01-05"
      ];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–®–∞–≥ –≤ 3 –¥–Ω—è –æ—Ç 2021-01-01 –¥–æ 2021-01-10",
    async test() {
      const gen = dateRangeGenerator("2021-01-01", "2021-01-10", 3);
      const result = [...gen];
      const expected = ["2021-01-01", "2021-01-04", "2021-01-07", "2021-01-10"];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å–æ–≤–ø–∞–¥–∞—é—Ç",
    async test() {
      const gen = dateRangeGenerator("2022-06-15", "2022-06-15", 5);
      const result = [...gen];
      const expected = ["2022-06-15"];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ù–∞—á–∞–ª–æ –ø–æ–∑–∂–µ –∫–æ–Ω—Ü–∞ ‚Äî –ø—É—Å—Ç–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
    async test() {
      const gen = dateRangeGenerator("2022-12-10", "2022-12-01", 1);
      const result = [...gen];
      const expected = [];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ü—Ä—ã–∂–æ–∫ —á–µ—Ä–µ–∑ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –¥–µ–Ω—å (2020-02-27‚Ä¶2020-03-01)",
    async test() {
      const gen = dateRangeGenerator("2020-02-27", "2020-03-01", 1);
      const result = [...gen];
      const expected = ["2020-02-27", "2020-02-28", "2020-02-29", "2020-03-01"];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ì—Ä–∞–Ω–∏—Ü–∞ –º–µ—Å—è—Ü–µ–≤ (2021-01-30‚Ä¶2021-02-02)",
    async test() {
      const gen = dateRangeGenerator("2021-01-30", "2021-02-02", 1);
      const result = [...gen];
      const expected = [
        "2021-01-30",
        "2021-01-31",
        "2021-02-01",
        "2021-02-02"
      ];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–í—Ö–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π",
    async test() {
      const gen = dateRangeGenerator(
        "2023-05-10T12:34:56Z",
        "2023-05-12T23:59:59Z",
        1
      );
      const result = [...gen];
      const expected = ["2023-05-10", "2023-05-11", "2023-05-12"];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  }
];

/* –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫ */
;(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è dateRangeGenerator...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error("–û—à–∏–±–∫–∞:", e.message);
      console.error(e.stack);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è dateRangeGenerator –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();


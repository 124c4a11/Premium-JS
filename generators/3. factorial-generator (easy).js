/*
  LeetCode 2803. Factorial Generator

  –ù–∞–ø–∏—à–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n 
  –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –≤—ã–¥–∞—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.

  –§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:
    n! = n √ó (n ‚àí 1) √ó (n ‚àí 2) √ó ‚Ä¶ √ó 2 √ó 1
  –ü—Ä–∏ —ç—Ç–æ–º 0! = 1

  –ü—Ä–∏–º–µ—Ä 1:
    –í—Ö–æ–¥: n = 5
    –í—ã—Ö–æ–¥: [1, 2, 6, 24, 120]
    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
      const gen = factorial(5);
      gen.next().value // 1
      gen.next().value // 2
      gen.next().value // 6
      gen.next().value // 24
      gen.next().value // 120

  –ü—Ä–∏–º–µ—Ä 2:
    –í—Ö–æ–¥: n = 2
    –í—ã—Ö–æ–¥: [1, 2]
    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
      const gen = factorial(2);
      gen.next().value // 1
      gen.next().value // 2

  –ü—Ä–∏–º–µ—Ä 3:
    –í—Ö–æ–¥: n = 0
    –í—ã—Ö–æ–¥: [1]
    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
      const gen = factorial(0);
      gen.next().value // 1

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    0 <= n <= 18
*/



function* factorial(n) {
  if (n === 0) yield 1;

  let result = 1;
  for (let i = 1; i <= n; ++i) {
    yield result *= i;
  }
}








// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/*
  –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ factorial.
*/
const tests = [
  {
    description: "–§–∞–∫—Ç–æ—Ä–∏–∞–ª 0 –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å [1]",
    async test() {
      const input = 0;
      const result = [...factorial(input)];
      const expected = [1];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–§–∞–∫—Ç–æ—Ä–∏–∞–ª 1 –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å [1]",
    async test() {
      const input = 1;
      const result = [...factorial(input)];
      const expected = [1];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–§–∞–∫—Ç–æ—Ä–∏–∞–ª 5 –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å [1, 2, 6, 24, 120]",
    async test() {
      const input = 5;
      const result = [...factorial(input)];
      const expected = [1, 2, 6, 24, 120];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è: –ø–µ—Ä–≤—ã–µ –¥–≤–∞ yield –¥–ª—è n=4",
    async test() {
      const input = 4;
      const gen = factorial(input);
      const first = gen.next();
      const second = gen.next();
      assert(
        first.value === 1 && !first.done,
        `–ü–µ—Ä–≤—ã–π yield: –æ–∂–∏–¥–∞–ª–æ—Å—å value=1, done=false, –ø–æ–ª—É—á–µ–Ω–æ value=${first.value}, done=${first.done}`
      );
      assert(
        second.value === 2 && !second.done,
        `–í—Ç–æ—Ä–æ–π yield: –æ–∂–∏–¥–∞–ª–æ—Å—å value=2, done=false, –ø–æ–ª—É—á–µ–Ω–æ value=${second.value}, done=${second.done}`
      );
    }
  },
  {
    description: "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ n (–Ω–∞–ø—Ä–∏–º–µ—Ä, -3) –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å []",
    async test() {
      const input = -3;
      const result = [...factorial(input)];
      const expected = [];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ë–æ–ª—å—à–æ–π n=10: –¥–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ 10, –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç 3628800",
    async test() {
      const input = 10;
      const result = [...factorial(input)];
      assert(
        result.length === 10,
        `–û–∂–∏–¥–∞–ª–æ—Å—å –¥–ª–∏–Ω—É 10, –ø–æ–ª—É—á–µ–Ω–æ ${result.length}`
      );
      assert(
        result[result.length - 1] === 3628800,
        `–û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç 3628800, –ø–æ–ª—É—á–µ–Ω–æ ${result[result.length - 1]}`
      );
    }
  },
  {
    description: "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π –∑–∞–ø—É—Å–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è n=3",
    async test() {
      const input = 3;
      const firstRun = [...factorial(input)];
      const secondRun = [...factorial(input)];
      const expected = [1, 2, 6];
      assert(
        JSON.stringify(firstRun) === JSON.stringify(expected),
        `–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(firstRun)}`
      );
      assert(
        JSON.stringify(secondRun) === JSON.stringify(expected),
        `–í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫: –æ–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(secondRun)}`
      );
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è factorial...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è factorial –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

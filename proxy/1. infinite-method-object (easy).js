/**
 * 2690. Infinite Method Object
 *
 * –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
 * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
 * –û–±—ä–µ–∫—Ç —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–∑—ã–≤–∞—Ç—å –ª—é–±–æ–π –º–µ—Ç–æ–¥,
 * –ø—Ä–∏ —ç—Ç–æ–º –≤—ã–∑–æ–≤ –ª—é–±–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–º—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
 *
 * –ü—Ä–∏–º–µ—Ä 1:
 * –í–≤–æ–¥:  –º–µ—Ç–æ–¥ = "abc123"
 * –í—ã–≤–æ–¥: "abc123"
 *
 * –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
 * –ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é createInfiniteObject(), —Ç–æ –≤—ã–∑–æ–≤:
 *   obj["abc123"]();
 * –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å "abc123", —Ç–æ –µ—Å—Ç—å –∏–º—è –≤—ã–∑–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.
 *
 * –ü—Ä–∏–º–µ—Ä 2:
 * –í–≤–æ–¥:  –º–µ—Ç–æ–¥ = ".-qw73n|^2It"
 * –í—ã–≤–æ–¥: ".-qw73n|^2It"
 *
 * –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
 * –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏–º–µ–Ω–∏ –≤—ã–∑—ã–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞, –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–º–µ–Ω–Ω–æ –µ–≥–æ.
 *
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
 * 0 <= –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç–æ–¥–∞ <= 1000
 *
 * –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ JavaScript/TypeScript:
 *
 * // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * const obj = createInfiniteObject();
 * console.log(obj.abc123()); // –í—ã–≤–µ–¥–µ—Ç: "abc123"
 */


function createInfiniteObject() {
  return new Proxy({}, {
    get(_, prop) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, Symbol.toPrimitive
      if (prop === Symbol.toPrimitive) {
        return () => "[object InfiniteMethodObject]";
      }
      // –î–ª—è –ª—é–±–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–º—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
      return () => prop.toString();
    }
  });
}




// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ createInfiniteObject */
const tests = [
  {
    description: "–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é",
    async test() {
      const obj = createInfiniteObject();
      const result = obj.abc123();
      assert(
        result === "abc123",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "abc123", –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏",
    async test() {
      const obj = createInfiniteObject();
      const result = obj[".-qw73n|^2It"]();
      assert(
        result === ".-qw73n|^2It",
        `–û–∂–∏–¥–∞–ª–æ—Å—å ".-qw73n|^2It", –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤",
    async test() {
      const obj = createInfiniteObject();
      const result1 = obj.foo();
      const result2 = obj.bar();
      assert(
        result1 === "foo",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "foo", –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result1)}`
      );
      assert(
        result2 === "bar",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "bar", –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result2)}`
      );
    },
  },
  {
    description: "–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –∫–ª—é—á–æ–º",
    async test() {
      const obj = createInfiniteObject();
      const result = obj[42]();
      assert(
        result === "42",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "42", –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Symbol.toPrimitive",
    async test() {
      const obj = createInfiniteObject();
      const primitiveValue = obj[Symbol.toPrimitive]("string");
      assert(
        primitiveValue === "[object InfiniteMethodObject]",
        `–û–∂–∏–¥–∞–ª–æ—Å—å "[object InfiniteMethodObject]", –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(primitiveValue)}`
      );
    },
  },
  {
    description: "–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º",
    async test() {
      const obj = createInfiniteObject();
      const customSymbol = Symbol("custom");
      const result = obj[customSymbol]();
      assert(
        result === customSymbol.toString(),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${customSymbol.toString()}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
];

/* –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ */
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è createInfiniteObject...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è createInfiniteObject –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

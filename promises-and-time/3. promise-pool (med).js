/*

  LeetCode 2636. Promise Pool

  Описание: Вам дана задача реализовать функцию promisePool, которая принимает два аргумента:

    - functions – массив асинхронных функций (функций, возвращающих промисы),

    - n – целое число, обозначающее максимальное количество одновременно выполняющихся (pending) промисов (ограничение пула).

  Требования:

    1. Функция promisePool должна запускать функции из массива в том порядке, в котором они заданы.

    2. В любой момент времени одновременно должно выполняться не более n промисов.

    3. Как только какой-либо из запущенных промисов завершится (разрешится), если ещё остались неопределённые функции, должна быть запущена следующая функция из очереди, чтобы всегда поддерживать максимум n одновременных промисов.

    4. Если n больше или равно количеству функций в массиве, можно запустить все функции одновременно.

    5. Можно считать, что все функции гарантированно никогда не выбрасывают ошибку (не вызывают reject).

    6. Функция promisePool должна вернуть промис, который разрешается в тот момент, когда завершатся все входящие промисы (то есть, когда все функции из массива будут выполнены).

  Эта реализация позволяет ограничить число параллельных операций, что может быть полезно, когда необходимо работать с ресурсами с ограничениями (например, ограниченное число запросов к серверу).

  Такой подход помогает контролировать количество одновременно работающих асинхронных операций и предотвращает перегрузку системы.
*/



async function promisePool(functions, n) {
  // Переменная `i` служит счётчиком для отслеживания текущей позиции в массиве `functions`.
  // Каждый раз, когда запускается функция, мы увеличиваем этот индекс, обеспечивая последовательный запуск.
  let i = 0;

  // Объявляем асинхронную функцию `next`, которая отвечает за запуск одной задачи из массива.
  // После завершения текущей задачи функция рекурсивно вызывает сама себя для обработки следующей.
  async function next() {
    // Если индекс i равен длинe массива, значит все функции уже запущены,
    // и рекурсивное выполнение завершается.
    if (i === functions.length) return;

    // Сохраняем текущую функцию из массива по индексу `i` и сразу же увеличиваем индекс.
    // Это обеспечивает запуск функций в том порядке, в котором они расположены, и предотвращает повторное выполнение.
    const fn = functions[i++];

    // Ожидаем завершения выполнения функции `fn`. Оператор await приостанавливает выполнение
    // до тех пор, пока Promise не зарезолвится, гарантируя, что текущая задача завершится перед запуском следующей.
    await fn();

    // После успешного завершения текущей функции вызываем `next` рекурсивно,
    // чтобы обработать следующую функцию из массива, если она существует.
    await next();
  };

  // Массив `pool` будет содержать промисы, соответствующие запущенным "цепочкам" вызова next.
  // Каждый промис в этом массиве представляет независимого "воркера", который последовательно
  // обрабатывает функции из массива.
  const pool = [];

  // Запускаем одновременно `n` "воркеров". То есть, если n = 2, то одновременно
  // запускаются две цепочки вызова next(), каждая из которых работает независимо.
  for (let j = 0; j < n; j++) {
    pool.push(next());
  }

  // Функция Promise.all ожидает, пока все промисы из массива `pool` не разрешатся.
  // Оператор await перед Promise.all(pool) нужен для того, чтобы функция promisePool не завершилась до тех пор,
  // пока все запущенные асинхронные “воркеры” (цепочки вызова next()) не завершат свою работу.
  // Давайте подробнее разберём, что здесь происходит:
  //  1. Агрегация промисов: Массив pool содержит промисы, возвращаемые вызовами функции next() из каждого из запущенных «воркеров». 
  //     Каждый такой промис представляет собой цепочку вызовов, которая обрабатывает несколько функций из исходного массива.
  //  2. Promise.all: Функция Promise.all(pool) собирает все эти промисы и возвращает новый промис, который разрешится,
  //     когда все промисы внутри массива будут разрешены. Это позволяет агрегировать результат работы всех воркеров.
  //  3. Использование await: Запись await Promise.all(pool) заставляет выполнение функции promisePool приостановиться на этом месте
  //  до тех пор, пока агрегирующий промис не завершится. Это гарантирует, что функция promisePool вернёт управление только после того,
  //  как все асинхронные операции (все цепочки вызова next()) завершены. Если не использовать await, то функция promisePool,
  //  будучи асинхронной, сразу вернёт промис, который может быть в состоянии «pending», не дожидаясь завершения всех внутренних задач.
  //  Это нарушило бы требование задачи, согласно которому промис, возвращаемый promisePool, должен разрешаться именно после выполнения
  //  всех переданных функций.
  await Promise.all(pool);
}




// Вспомогательная функция для создания задержки.
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Вспомогательная функция assert, выбрасывающая ошибку, если условие не выполнено.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

// Тестовые кейсы для promisePool (в стиле тестов для deepEqual)
const tests = [
  {
    description: "Пустой массив функций",
    async test() {
      const start = Date.now();
      await promisePool([], 3);
      const elapsed = Date.now() - start;
      // Ожидается, что выполнение завершится практически мгновенно.
      assert(
        elapsed < 50,
        `Ожидалось быстрое завершение, время ${elapsed} ms`
      );
    },
  },
  {
    description: "Одна функция с задержкой",
    async test() {
      let order = [];
      const tasks = [
        async () => {
          order.push(1);
          await delay(100);
          order.push(2);
        },
      ];
      await promisePool(tasks, 1);
      const expected = "1,2";
      assert(
        order.join(",") === expected,
        `Ожидалось "${expected}", получено "${order.join(",")}"`
      );
    },
  },
  {
    description: "Ограничение параллельности (n = 2 из 5 задач)",
    async test() {
      let activeCount = 0;
      let maxActive = 0;
      const totalTasks = 5;
      const tasks = Array.from({ length: totalTasks }, () => async () => {
        activeCount++;
        maxActive = Math.max(maxActive, activeCount);
        await delay(100);
        activeCount--;
      });
      await promisePool(tasks, 2);
      assert(
        maxActive <= 2,
        `Максимальная параллельность ${maxActive}, ожидалось не более 2`
      );
    },
  },
  {
    description: "Значение n больше числа функций",
    async test() {
      let activeCount = 0;
      let maxActive = 0;
      const totalTasks = 3;
      const tasks = Array.from({ length: totalTasks }, () => async () => {
        activeCount++;
        maxActive = Math.max(maxActive, activeCount);
        await delay(50);
        activeCount--;
      });
      await promisePool(tasks, 5);
      assert(
        maxActive === totalTasks,
        `Максимальная параллельность ${maxActive}, ожидалось ${totalTasks}`
      );
    },
  },
  {
    description: "Синхронные задачи",
    async test() {
      let order = [];
      const tasks = [
        async () => { order.push(1); },
        async () => { order.push(2); },
        async () => { order.push(3); },
      ];
      await promisePool(tasks, 2);
      const expected = "1,2,3";
      assert(
        order.join(",") === expected,
        `Ожидалось "${expected}", получено "${order.join(",")}"`
      );
    },
  },
  {
    description: "Задача с ошибкой",
    async test() {
      const tasks = [
        async () => { await delay(50); },
        async () => {
          await delay(50);
          throw new Error("Test Error");
        },
        async () => { await delay(50); },
      ];
      let errorCaught = false;
      try {
        await promisePool(tasks, 2);
      } catch (e) {
        errorCaught = true;
        assert(
          e.message === "Test Error",
          `Ожидалось "Test Error", получено "${e.message}"`
        );
      }
      assert(errorCaught, "Ожидалась ошибка, но ошибки не было");
    },
  },
];

// Запуск тестов в стиле deepEqual.
(async () => {
  console.log("Запуск тестов для promisePool...");
  let hasErrors = false;
  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`✔️  Тест ${i + 1} пройден: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`❌ Тест ${i + 1} не пройден: ${tests[i].description}`);
      console.error(e);
    }
  }
  if (hasErrors) {
    console.error("❗ Некоторые тесты завершились с ошибкой.");
  } else {
    console.log("🎉 Все тесты для promisePool завершены успешно.");
  }
})();
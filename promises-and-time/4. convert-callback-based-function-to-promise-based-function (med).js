/**
 * –ó–∞–¥–∞—á–∞: LeetCode 2776. Convert Callback Based Function to
 *         Promise Based Function
 * 
 * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é promisify, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—Ä—É–≥—É—é
 * —Ñ—É–Ω–∫—Ü–∏—é fn –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–ª–±—ç–∫–æ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é,
 * –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é Promise.
 *
 * –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è fn –ø–æ–ª—É—á–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–≤–æ–≥–æ
 * –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–ª–±—ç–∫, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥—É—é—Ç –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
 * –∞—Ä–≥—É–º–µ–Ω—Ç—ã args.
 *
 * –§—É–Ω–∫—Ü–∏—è promisify –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è
 * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise. –≠—Ç–æ—Ç Promise –¥–æ–ª–∂–µ–Ω:
 * - —Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
 *   –∫–æ–ª–±—ç–∫–∞, –µ—Å–ª–∏ –∫–æ–ª–±—ç–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏;
 * - –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—à–∏–±–∫–æ–π (error), –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≤—Ç–æ—Ä—ã–º
 *   –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –∫–æ–ª–±—ç–∫–∞, –µ—Å–ª–∏ –∫–æ–ª–±—ç–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π.
 *
 * –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ promisify:
 *
 * function sum(callback, a, b) {
 *   if (a < 0 || b < 0) {
 *     const err = Error('a and b must be positive');
 *     callback(undefined, err);
 *   } else {
 *     callback(a + b);
 *   }
 * }
 *
 * –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ Promise:
 *
 * async function sum(a, b) {
 *   if (a < 0 || b < 0) {
 *     throw Error('a and b must be positive');
 *   } else {
 *     return a + b;
 *   }
 * }
 *
 * –ü—Ä–∏–º–µ—Ä 1:
 *
 * –í—Ö–æ–¥:
 * fn = (callback, a, b, c) => {
 *   callback(a * b * c);
 * }
 * args = [1, 2, 3]
 *
 * –í—ã–≤–æ–¥: {"resolved": 6}
 *
 * –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
 * const asyncFunc = promisify(fn);
 * asyncFunc(1, 2, 3).then(console.log); // 6
 *
 * –ü—Ä–∏–º–µ—Ä 2:
 *
 * –í—Ö–æ–¥:
 * fn = (callback, a, b, c) => {
 *   callback(a * b * c, "Promise Rejected");
 * }
 * args = [4, 5, 6]
 *
 * –í—ã–≤–æ–¥: {"rejected": "Promise Rejected"}
 *
 * –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
 * const asyncFunc = promisify(fn);
 * asyncFunc(4, 5, 6).catch(console.log); // "Promise
 * Rejected"
 *
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
 * 1 <= args.length <= 100
 * 0 <= args[i] <= 10^4
 */


function promisify(fn) {
  return function () {
    return new Promise((resolve, reject) => {
      fn((data, error) => {
        if (error) reject(error);
        else resolve(data);
      }, ...arguments);
    });
  };
}











// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

const tests = [
  {
    description: "–£—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–∫–∏ (—É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 2)",
    async test() {
      function double(callback, x) {
        callback(x * 2);
      }
      const asyncDouble = promisify(double);
      const result = await asyncDouble(5);
      assert(result === 10, `–û–∂–∏–¥–∞–ª–æ—Å—å 10, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  },
  {
    description: "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–ª–±—ç–∫–∞",
    async test() {
      function fail(callback, x) {
        const err = new Error("fail");
        callback(undefined, err);
      }
      const asyncFail = promisify(fail);
      try {
        await asyncFail(123);
        assert(false, "–û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–º–∏—Å –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω");
      } catch (e) {
        assert(e instanceof Error, "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Error");
        assert(e.message === "fail", `–û–∂–∏–¥–∞–ª–æ—Å—å "fail", –ø–æ–ª—É—á–µ–Ω–æ "${e.message}"`);
      }
    },
  },
  {
    description: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—à–∏–±–∫–∏ –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã",
    async test() {
      function mixed(callback) {
        callback("data", "error!");
      }
      const asyncMixed = promisify(mixed);
      try {
        await asyncMixed();
        assert(false, "–û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏");
      } catch (e) {
        assert(e === "error!", `–û–∂–∏–¥–∞–ª–æ—Å—å "error!", –ø–æ–ª—É—á–µ–Ω–æ "${e}"`);
      }
    },
  },
  {
    description: "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å undefined –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
    async test() {
      function noArgs(callback) {
        callback();
      }
      const asyncNoArgs = promisify(noArgs);
      const result = await asyncNoArgs();
      assert(result === undefined, `–û–∂–∏–¥–∞–ª–æ—Å—å undefined, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  },
  {
    description: "–ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é",
    async test() {
      function collect(callback, a, b, c, d) {
        callback([a, b, c, d]);
      }
      const asyncCollect = promisify(collect);
      const result = await asyncCollect(1, 2, 3, 4);
      assert(
        Array.isArray(result) && result.length === 4 &&
        result.every((v, i) => v === i + 1),
        `–û–∂–∏–¥–∞–ª–æ—Å—å [1,2,3,4], –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    },
  },
  {
    description: "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ setTimeout",
    async test() {
      function asyncSum(callback, a, b) {
        setTimeout(() => {
          callback(a + b);
        }, 10);
      }
      const asyncSumProm = promisify(asyncSum);
      const result = await asyncSumProm(7, 8);
      assert(result === 15, `–û–∂–∏–¥–∞–ª–æ—Å—å 15, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
    },
  },
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è promisify...");
  let hasErrors = false;
  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }
  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è promisify –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

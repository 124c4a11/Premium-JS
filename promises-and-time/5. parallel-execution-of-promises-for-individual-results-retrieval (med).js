/*
  LeetCode 2795. Parallel Execution of Promises for Individual Results Retrieval

  –î–∞–Ω –º–∞—Å—Å–∏–≤ functions, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–º–∏—Å.  
  functions ‚Äî –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å fnPromise.  
  –ö–∞–∂–¥—ã–π fnPromise –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω.  

  –ï—Å–ª–∏ fnPromise —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ:  
      obj = { status: "fulfilled", value: <–∑–Ω–∞—á–µ–Ω–∏–µ> }  

  –ï—Å–ª–∏ fnPromise –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è:  
      obj = { status: "rejected", reason: <–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è> }  

  –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å—Å—è –º–∞—Å—Å–∏–≤–æ–º —Ç–∞–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ obj –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.  

  –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ Promise.allSettled().  

  –ü—Ä–∏–º–µ—Ä 1:
      Input: functions = [
          () => new Promise(resolve => setTimeout(() => resolve(15), 100))
      ]
      Output: {"t":100,"values":[{"status":"fulfilled","value":15}]}

  –ü—Ä–∏–º–µ—Ä 2:
      Input: functions = [
          () => new Promise(resolve => setTimeout(() => resolve(20), 100)),
          () => new Promise(resolve => setTimeout(() => resolve(15), 100))
      ]
      Output:
      {
          "t":100,
          "values": [
              {"status":"fulfilled","value":20},
              {"status":"fulfilled","value":15}
          ]
      }

  –ü—Ä–∏–º–µ—Ä 3:
      Input: functions = [
          () => new Promise(resolve => setTimeout(() => resolve(30), 200)),
          () => new Promise((resolve, reject) => setTimeout(() => reject("Error"), 100))
      ]
      Output:
      {
          "t":200,
          "values": [
              {"status":"fulfilled","value":30},
              {"status":"rejected","reason":"Error"}
          ]
      }

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
      1 <= functions.length <= 10
*/


function promiseAllSettled(functions) {
  return new Promise((resolve) => {
    if (!Array.isArray(functions) || !functions.length) {
      return resolve([]);
    }

    const n = functions.length;
    const results = [];

    let completedCount = 0;
    for (let i = 0; i < n; i++) {
      functions[i]()
        .then((value) => ({ status: 'fulfilled', value }))
        .catch((reason) => ({ status: 'rejected', reason }))
        .then((result) => {
          results[i] = result;
          completedCount++;

          if (completedCount === n) {
            resolve(results);
          }
        });
    }
  });
}









// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/*
  –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ promiseAllSettled.
*/
const tests = [
  {
    description: "–ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º",
    async test() {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Ç—Ä–æ–∫—É, null –∏ —Ç.–¥.)
      const functions = 123;
      const result = await promiseAllSettled(functions);
      const expected = [];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π",
    async test() {
      const functions = [];
      const result = await promiseAllSettled(functions);
      const expected = [];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–û–¥–∏–Ω–æ—á–Ω—ã–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å",
    async test() {
      const functions = [() => Promise.resolve(1)];
      const result = await promiseAllSettled(functions);
      const expected = [{ status: "fulfilled", value: 1 }];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–û–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å",
    async test() {
      const functions = [() => Promise.reject("error")];
      const result = await promiseAllSettled(functions);
      const expected = [{ status: "rejected", reason: "error" }];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–ù–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤ —Å —Ä–∞–∑–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π",
    async test() {
      const functions = [
        () => new Promise(res => setTimeout(() => res(10), 50)),
        () => new Promise(res => setTimeout(() => res(20), 10))
      ];
      const start = Date.now();
      const result = await promiseAllSettled(functions);
      const duration = Date.now() - start;
      const expected = [
        { status: "fulfilled", value: 10 },
        { status: "fulfilled", value: 20 }
      ];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
      assert(
        duration >= 50,
        `–û–∂–∏–¥–∞–ª–æ—Å—å –≤—Ä–µ–º—è ‚â• 50ms, –ø–æ–ª—É—á–µ–Ω–æ ${duration}ms`
      );
    }
  },
  {
    description: "–ü–æ—Ä—è–¥–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
    async test() {
      const functions = [
        () => new Promise(res => setTimeout(() => res("first"), 30)),
        () => new Promise((_, rej) => setTimeout(() => rej("fail"), 10))
      ];
      const result = await promiseAllSettled(functions);
      const expected = [
        { status: "fulfilled", value: "first" },
        { status: "rejected", reason: "fail" }
      ];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  },
  {
    description: "–°–º–µ—à–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–∏—Å—ã: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ, –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
    async test() {
      const functions = [
        () => Promise.resolve("a"),
        () => new Promise((_, rej) => setTimeout(() => rej("b error"), 20)),
        () => new Promise(res => setTimeout(() => res("c"), 10))
      ];
      const result = await promiseAllSettled(functions);
      const expected = [
        { status: "fulfilled", value: "a" },
        { status: "rejected", reason: "b error" },
        { status: "fulfilled", value: "c" }
      ];
      assert(
        JSON.stringify(result) === JSON.stringify(expected),
        `–û–∂–∏–¥–∞–ª–æ—Å—å ${JSON.stringify(expected)}, –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(result)}`
      );
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è promiseAllSettled...");
  let hasErrors = false;

  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }

  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è promiseAllSettled –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();

/*
  LeetCode 2821. Delay the Resolution of Each Promise

  –î–∞–Ω–æ –º–∞—Å—Å–∏–≤ functions –∏ —á–∏—Å–ª–æ ms. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π.

  functions ‚Äî –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö –ø—Ä–æ–º–∏—Å—ã.
  ms ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö; –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞ –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ.

  –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ms –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ functions. –§—É–Ω–∫—Ü–∏—è delayAll –¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏—Ç—å, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —Ñ–æ—Ä–º–∏—Ä—É—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö –ø—Ä–æ–º–∏—Å—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.

  –ü—Ä–∏–º–µ—Ä 1:
  –í—Ö–æ–¥:
  functions = [
    () => new Promise(resolve => setTimeout(resolve, 30))
  ],
  ms = 50

  –í—ã–≤–æ–¥: [80]
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ø—Ä–æ–º–∏—Å –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä–µ—à–∏–ª—Å—è –±—ã —á–µ—Ä–µ–∑ 30 –º—Å, –Ω–æ –±—ã–ª –∑–∞–¥–µ—Ä–∂–∞–Ω –Ω–∞ 50 –º—Å, –∏—Ç–æ–≥–æ 30 + 50 = 80 –º—Å.

  –ü—Ä–∏–º–µ—Ä 2:
  –í—Ö–æ–¥:
  functions = [
    () => new Promise(resolve => setTimeout(resolve, 50)),
    () => new Promise(resolve => setTimeout(resolve, 80))
  ],
  ms = 70

  –í—ã–≤–æ–¥: [120, 150]
  –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ø—Ä–æ–º–∏—Å—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä–µ—à–∏–ª–∏—Å—å –±—ã —á–µ—Ä–µ–∑ 50 –º—Å –∏ 80 –º—Å, –Ω–æ –±—ã–ª–∏ –∑–∞–¥–µ—Ä–∂–∞–Ω—ã –Ω–∞ 70 –º—Å, –∏—Ç–æ–≥–æ 50 + 70 = 120 –º—Å –∏ 80 + 70 = 150 –º—Å.

  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
  - functions ‚Äî –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö –ø—Ä–æ–º–∏—Å—ã.
  - 10 <= ms <= 500
  - 1 <= functions.length <= 10
*/



/*
  –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é delayAll, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
    functions ‚Äî –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö –ø—Ä–æ–º–∏—Å—ã;
    ms ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
*/
function delayAll(functions, ms) {

  /*
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ .map –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ functions.
    –î–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fn –º—ã —Å–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é.
  */
  return functions.map((fn) => {

    /*
      –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ:
      1) —Å—Ç–∞–≤–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è;
      2) –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fn.
    */
    return async () => {

      /*
        –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π
        —á–µ—Ä–µ–∑ ms –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤—ã–∑—ã–≤–∞–µ—Ç resolve,
        —Ç–µ–º —Å–∞–º—ã–º "—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—è" –æ–∂–∏–¥–∞–Ω–∏–µ await.
      */
      await new Promise((resolve) =>
        setTimeout(resolve, ms)
      );

      /*
        –ü–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fn()
        –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–æ–º–∏—Å).
      */
      return fn();
    };
  });
}











// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è delayAll
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏.
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert, –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è delayAll
const tests = [
  {
    description: "–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π",
    async test() {
      const start = Date.now();
      const wrapped = delayAll([], 100);
      const elapsed = Date.now() - start;
      assert(Array.isArray(wrapped), "–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤");
      assert(wrapped.length === 0, `–û–∂–∏–¥–∞–ª–æ—Å—å 0 —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–ª—É—á–µ–Ω–æ ${wrapped.length}`);
      assert(elapsed < 50, `–û–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ${elapsed} ms`);
    },
  },
  {
    description: "–û–¥–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π",
    async test() {
      let called = false;
      const fn = () => {
        called = true;
        return 123;
      };
      const [wrapped] = delayAll([fn], 100);
      const start = Date.now();
      const result = await wrapped();
      const elapsed = Date.now() - start;
      assert(called, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞");
      assert(result === 123, `–û–∂–∏–¥–∞–ª–æ—Å—å 123, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
      assert(elapsed >= 90 && elapsed < 200, `–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~100ms, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${elapsed} ms`);
    },
  },
  {
    description: "–û–¥–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π",
    async test() {
      let order = [];
      const fn = async () => {
        order.push("before");
        await delay(50);
        order.push("after");
        return "done";
      };
      const [wrapped] = delayAll([fn], 100);
      const start = Date.now();
      const result = await wrapped();
      const elapsed = Date.now() - start;
      assert(result === "done", `–û–∂–∏–¥–∞–ª–æ—Å—å "done", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`);
      assert(order.join(",") === "before,after", `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: ${order.join(",")}`);
      assert(elapsed >= 140 && elapsed < 250, `–ü–æ–ª–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~150ms, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${elapsed} ms`);
    },
  },
  {
    description: "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ",
    async test() {
      const durations = [30, 60, 90];
      const fns = durations.map((d, i) => async () => {
        await delay(d);
        return i;
      });
      const wrapped = delayAll(fns, 50);
      const start = Date.now();
      const results = await Promise.all(wrapped.map(fn => fn()));
      const elapsed = Date.now() - start;
      // –í—Å–µ —Ç—Ä–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: ms (50) + max –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π (90) = ~140ms
      assert(results.join(",") === "0,1,2", `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${results}`);
      assert(elapsed >= 130 && elapsed < 250, `–û–∂–∏–¥–∞–ª–æ—Å—å ~140ms, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${elapsed} ms`);
    },
  },
  {
    description: "–ó–∞–¥–µ—Ä–∂–∫–∞ 0 ms",
    async test() {
      let count = 0;
      const fns = [
        () => { count++; return "a"; },
        () => { count++; return "b"; }
      ];
      const wrapped = delayAll(fns, 0);
      const results = [];
      results.push(await wrapped[0]());
      results.push(await wrapped[1]());
      assert(count === 2, `–û–∂–∏–¥–∞–ª–æ—Å—å 2 –≤—ã–∑–æ–≤–∞, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${count}`);
      assert(results.join("") === "ab", `–û–∂–∏–¥–∞–ª–∏—Å—å ["a","b"], –ø–æ–ª—É—á–µ–Ω–æ ${JSON.stringify(results)}`);
    },
  },
  {
    description: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É",
    async test() {
      const fnErr = () => { throw new Error("Oops"); };
      const [wrapped] = delayAll([fnErr], 50);
      let caught = false;
      try {
        await wrapped();
      } catch (e) {
        caught = true;
        assert(e.message === "Oops", `–û–∂–∏–¥–∞–ª–æ—Å—å "Oops", –ø–æ–ª—É—á–µ–Ω–æ "${e.message}"`);
      }
      assert(caught, "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ –±—ã–ª–æ");
    },
  },
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
(async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è delayAll...");
  let hasErrors = false;
  for (let i = 0; i < tests.length; i++) {
    try {
      await tests[i].test();
      console.log(`‚úîÔ∏è  –¢–µ—Å—Ç ${i + 1} –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
    } catch (e) {
      hasErrors = true;
      console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${tests[i].description}`);
      console.error(e);
    }
  }
  if (hasErrors) {
    console.error("‚ùó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.");
  } else {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è delayAll –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
  }
})();
